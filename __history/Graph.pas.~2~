unit Graph;

interface

uses List, Graphics, SysUtils;

Type
  TGraph = class
  public
    ArrayOfDots: TDotArray;
    MinExtrList: TList;
    MaxExtrList: TList;
    Color: TColor;
    Width: Byte;

    constructor Create(ArrayOfDots: TDotArray; Color: TColor; Width: Byte);
    destructor Destroy();
    procedure Paint(Bitmap: TBitmap; Step: Real; Scale, YOffset, LBorder, RBorder: Integer);

  end;
implementation
  constructor TGraph.Create(ArrayOfDots: TDotArray; Color: TColor; Width: Byte);
    Begin
      MinExtrList := TList.Create;
      MaxExtrList := TList.Create;
      with Self do
        Begin
          ArrayOfDots := ArrayOfDots;
          Color := Color;
          Width := Width;
        End;
    End;

  destructor TGraph.Destroy();
    Begin
      MinExtrList.Destroy;
      MaxExtrList.Destroy;
      inherited;
    End;

  procedure TGraph.Paint(Bitmap: TBitmap; Step: Real; Scale, YOffset, LBorder, RBorder: Integer);
  var
    WasNan: Boolean;
    CurrX: Real;
    CurrY: LongInt;
    I: Integer;
    Begin
      WasNan := True;
      CurrX := 0;
      for I := LBorder + 1 to RBorder do
        Begin
          CurrY := Trunc(-Scale * Self.ArrayOfDots[I]) + YOffset;
          if (FloatToStr(Self.ArrayOfDots[I]) = 'NAN') or
             (Self.ArrayOfDots[I] > 4375000) or
             (Self.ArrayOfDots[I] < -4375000) then
            WasNaN := True
          else if (WasNan) then
            begin
              Bitmap.Canvas.MoveTo(Trunc(CurrX), CurrY);
              WasNan := False;
            End
          else
            Bitmap.Canvas.LineTo(Trunc(CurrX), CurrY);

          CurrX := CurrX + Step;
        End;
    End;
end.
